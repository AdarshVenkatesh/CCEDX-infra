parameters:
- name: environment
  type: string
  default: 'sit'
- name: location
  type: string
  default: 'westus2'
- name: workingDirectory
  type: string
- name: backendAzureRmResourceGroupName
  type: string
- name: backendAzureRmStorageAccountName
  type: string
- name: backendAzureRmContainerName
  type: string
- name: backendAzureRmKey
  type: string
- name: keyVaultName
  type: string
  default: ''
- name: storageSecretKey
  type: string
- name: jsonfileName
  type: string
- name: isCommonResourceDeployment
  type: string
  default: 'true'
- name: isTerraformPlanValidated  
  type: string
  default: 'false'
- name: cspResourceGroup
  type: string
  default: ''
- name: utpWorkspaceId
  type: string
  default: ''

steps:
- ${{ each parameter in parameters }}:
  - script: echo '${{ parameter.Key }} -> ${{ parameter.Value }}'

- task: Bash@3
  displayName: 'Download and Unzip Terraform'
  inputs:
    targetType: 'inline'
    workingDirectory:  '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}'
    script: |
      # env | sort
      
      echo "*************************************************************"
      echo "*                   Downloading Terraform                   *"
      echo "*************************************************************"
      sudo apt-get install unzip
      wget https://releases.hashicorp.com/terraform/0.15.0/terraform_0.15.0_linux_amd64.zip
      unzip terraform_0.15.0_linux_amd64.zip
      sudo mv terraform /usr/local/bin/
      rm -f terraform_0.15.0_linux_amd64.zip
      terraform --version

- task: AzureCLI@2
  displayName: 'Get storage key value from key vault'
  inputs:
    azureSubscription: RM-SubscriptionResources-2020-4-20
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      skValue=$(az keyvault secret show --vault-name ${{ parameters.keyVaultName }} --name ${{ parameters.storageSecretKey }} --query value --output tsv)
      echo '##vso[task.setvariable variable=storageKeyValue]'$skValue

- task: Bash@3
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    workingDirectory:  '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}'
    script: |
      echo "*************************************************************"
      echo "*                     Terraform Init                        *"
      echo "*************************************************************"
     
      terraform init -reconfigure\
        -backend-config="resource_group_name=${{ parameters.backendAzureRmResourceGroupName }}" \
        -backend-config="storage_account_name=${{ parameters.backendAzureRmStorageAccountName }}" \
        -backend-config="container_name=${{ parameters.backendAzureRmContainerName }}" \
        -backend-config="key=${{ parameters.backendAzureRmKey }}" \
        -backend-config="access_key=$(storageKeyValue)"

- task: AzureCLI@2
  displayName: 'Terraform Plan'
  inputs:
    workingDirectory:  '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}'
    azureSubscription: RM-SubscriptionResources-2020-4-20
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "*************************************************************"
      echo "*                   Terraform Plan                          *"
      echo "*************************************************************"

      subscriptionId=$(az account show --query id --output tsv)
      echo ${{ parameters.isCommonResourceDeployment }}

      if [ ${{ parameters.isCommonResourceDeployment }} = 'true' ]; then
        echo 'Common Resource Deployment'
        terraform plan -var environment=${{ parameters.environment }} -var utp_workspace_id=${{ parameters.utpWorkspaceId }} -var csp_resource_group=${{ parameters.cspResourceGroup }} -var client_id=$servicePrincipalId -var client_secret=$servicePrincipalKey -var tenant_id=$tenantId -var subscription_id=$subscriptionId -out tf.plan
      fi
    addSpnToEnvironment: true

- task: Bash@3
  displayName: 'Terraform Apply'
  condition: eq(${{ parameters.isTerraformPlanValidated }}, true)
  inputs:
    workingDirectory:  '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}'
    targetType: 'inline'
    script: |
      echo "*************************************************************"
      echo "*                   Terraform Apply                         *"
      echo "*************************************************************"
      
      terraform apply tf.plan

- task: Bash@3
  displayName: 'Terraform Output'
  condition: eq(${{ parameters.isTerraformPlanValidated }}, true)
  name: setOutput
  inputs:
    workingDirectory:  '$(Pipeline.Workspace)/${{ parameters.workingDirectory }}'
    targetType: 'inline'
    script: |
      echo "*************************************************************"
      echo "*                   Terraform Output                         *"
      echo "*************************************************************"
      
      terraform output -json > ${{ parameters.jsonfileName }}
      cat ${{ parameters.jsonfileName }}
      
      if [ ${{ parameters.isCommonResourceDeployment }} = 'true' ]; then
        mkdir -p $(Pipeline.Workspace)/${{ parameters.environment }}-variables

        RANDOM_ID_SUFFIX_DESC=$(cat ${{ parameters.jsonfileName }} | jq '."random-id-suffix-dec".value' -r)
        echo $RANDOM_ID_SUFFIX_DESC > $(Pipeline.Workspace)/${{ parameters.environment }}-variables/randomIdSuffixDesc.variable
      fi